{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Line from \"../components/Row\";\nimport fetch from \"isomorphic-unfetch\";\nimport { useState } from \"react\";\nimport SortId from \"../components/sort\";\nimport Table from \"../components/table\";\nvar styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nfunction sortId(humans) {\n  humans.sort(function (a, b) {\n    return a.id - b.id;\n  });\n}\n\nfunction rsortId(humans) {\n  return humans.reverse();\n}\n\nexport default function Index(_ref) {\n  var humans = _ref.humans;\n\n  var _useState = useState(false),\n      sort = _useState[0],\n      setSort = _useState[1];\n\n  var toDoOpen = function toDoOpen() {\n    setSort(!sort);\n\n    if (sort) {\n      rsortId(humans);\n    }\n\n    if (!sort) {\n      sortId(humans);\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Table, {\n    humans: humans,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n}\n;\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            humans: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["Line","fetch","useState","SortId","Table","styles","root","margin","width","sortId","humans","sort","a","b","id","rsortId","reverse","Index","setSort","toDoOpen","getInitialProps","res","json","data","console","log","length"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAC,CADH;AAEJC,IAAAA,KAAK,EAAC;AAFF;AADO,CAAf;;AAKE,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtBA,EAAAA,MAAM,CAACC,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACzB,WAAOD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAhB;AACD,GAFD;AAGD;;AACD,SAASC,OAAT,CAAiBL,MAAjB,EAAyB;AAEpB,SAAOA,MAAM,CAACM,OAAP,EAAP;AAEJ;;AAEH,eAAe,SAASC,KAAT,OAAyB;AAAA,MAATP,MAAS,QAATA,MAAS;;AAAA,kBACdR,QAAQ,CAAC,KAAD,CADM;AAAA,MAC/BS,IAD+B;AAAA,MACzBO,OADyB;;AAEtC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBD,IAAAA,OAAO,CAAC,CAACP,IAAF,CAAP;;AACA,QAAIA,IAAJ,EAAS;AACTI,MAAAA,OAAO,CAACL,MAAD,CAAP;AAAgB;;AAChB,QAAI,CAACC,IAAL,EAAW;AACTF,MAAAA,MAAM,CAACC,MAAD,CAAN;AAAe;AAClB,GAND;;AAQE,SACE;AAAK,IAAA,KAAK,EAAEL,MAAM,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAEI,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;AAAA;;AAEDO,KAAK,CAACG,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJnB,KAAK,CAAC,yNAAD,CADD;;AAAA;AAChBoB,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAJsB,2CAMf;AACLhB,YAAAA,MAAM,EAAEa;AADH,WANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import Line from \"../components/Row\"\nimport fetch from \"isomorphic-unfetch\";\nimport { useState } from \"react\";\n\nimport SortId from \"../components/sort\";\nimport Table from \"../components/table\";\n\nconst styles = {\n  root: {\n    margin:0,\n    width:\"100%\"\n  },}\n  function sortId(humans) {\n    humans.sort(function(a, b) {\n      return a.id - b.id;\n    });\n  }\n  function rsortId(humans) {\n   \n       return humans.reverse();\n    \n  }\n\nexport default function Index({humans}) {\n  const [sort, setSort] = useState(false);\n  const toDoOpen = () => {\n    setSort(!sort);\n    if (sort){\n    rsortId(humans)}\n    if (!sort) {\n      sortId(humans)}\n  };\n  \n    return (\n      <div style={styles.root}>\n        <Table humans={humans}/>\n      </div>\n    );\n  };\n\n  Index.getInitialProps = async function() {\n    const res = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n    const data = await res.json();\n  \n    console.log(`Show data fetched. Count: ${data.length}`);\n  \n    return {\n      humans: data\n    };\n  };"]},"metadata":{},"sourceType":"module"}