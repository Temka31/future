{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Line from \"../components/line\";\nimport fetch from \"isomorphic-unfetch\";\nimport SortId from \"../components/sort\";\nexport default function Index(props) {\n  var oneLine = [\"id\", \"firstName\", \"lastName\", \"email\", \"phone\"];\n  var hum = props.humans;\n  console.log(hum);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(SortId, {\n    humans: hum,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, props.humans.map(function (human) {\n    return __jsx(Line, {\n      human: human,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  })));\n}\n;\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          console.log(\"Show data fetched. Count: \".concat(data[1]));\n          return _context.abrupt(\"return\", {\n            humans: data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["Line","fetch","SortId","Index","props","oneLine","hum","humans","console","log","map","human","getInitialProps","res","json","data","length"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,MAAIC,OAAO,GAAG,CAAC,IAAD,EAAO,WAAP,EAAoB,UAApB,EAAgC,OAAhC,EAAyC,OAAzC,CAAd;AAEA,MAAIC,GAAG,GAACF,KAAK,CAACG,MAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEA,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACG,MAAN,CAAaG,GAAb,CAAiB,UAAAC,KAAK;AAAA,WACrB,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADqB;AAAA,GAAtB,CADH,CAJF,CADF;AAYD;AAAA;;AAEDR,KAAK,CAACS,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJX,KAAK,CAAC,yNAAD,CADD;;AAAA;AAChBY,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBP,UAAAA,OAAO,CAACC,GAAR,qCAAyCM,IAAI,CAACC,MAA9C;AACAR,UAAAA,OAAO,CAACC,GAAR,qCAAyCM,IAAI,CAAC,CAAD,CAA7C;AALsB,2CAOf;AACLR,YAAAA,MAAM,EAAEQ;AADH,WAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import Line from \"../components/line\"\nimport fetch from \"isomorphic-unfetch\";\nimport SortId from \"../components/sort\";\n\nexport default function Index(props) {\n  let oneLine = [\"id\", \"firstName\", \"lastName\", \"email\", \"phone\"];\n  \n  let hum=props.humans\n  console.log(hum);\n    return (\n      <div>\n        {/* <Line oneLine={oneLine}/> */}\n        \n        <SortId humans={hum}/>\n        <ul>\n          {props.humans.map(human => (\n            <Line human={human} />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  Index.getInitialProps = async function() {\n    const res = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n    const data = await res.json();\n  \n    console.log(`Show data fetched. Count: ${data.length}`);\n    console.log(`Show data fetched. Count: ${data[1]}`);\n  \n    return {\n      humans: data\n    };\n  };"]},"metadata":{},"sourceType":"module"}