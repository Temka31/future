{"ast":null,"code":"var _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Line from \"../components/Row\";\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo } from \"react\";\nimport SortId from \"../components/sort\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\nexport default function Index({\n  humans\n}) {\n  const {\n    0: items,\n    1: setItems\n  } = useState(humans);\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    if (reverse) {\n      setItems(items.sort((a, b) => {\n        return b[name] - a[name];\n      }));\n    } else {\n      setItems(items.sort((a, b) => {\n        return a[name] - b[name];\n      }));\n    }\n  };\n\n  const renderHeader = () => {\n    return __jsx(React.Fragment, null, headers.map(header => {\n      return __jsx(\"th\", {\n        key: header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(SortButton, {\n        title: header,\n        onReset: handleReset,\n        onSort: handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }));\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(Table, {\n    humans: humans,\n    renderHeader: renderHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch(\"http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\");\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    humans: data\n  };\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["Line","fetch","useState","useMemo","SortId","Table","SortButton","styles","root","margin","width","Index","humans","items","setItems","headers","Object","keys","handleReset","handleSort","name","reverse","sort","a","b","renderHeader","map","header","getInitialProps","res","data","json","console","log","length"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CADJ;AAEJC,IAAAA,KAAK,EAAE;AAFH;AADO,CAAf;AAOA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AACxC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAACU,MAAD,CAAlC;AACA,QAAMG,OAAO,GAAGZ,OAAO,CAAC,MAAM;AAC5B,WAAOa,MAAM,CAACC,IAAP,CAAYL,MAAM,CAAC,CAAD,CAAlB,CAAP;AACD,GAFsB,EAEpB,CAACA,MAAD,CAFoB,CAAvB;;AAIA,QAAMM,WAAW,GAAG,MAAM;AACxBJ,IAAAA,QAAQ,CAACF,MAAD,CAAR;AACD,GAFD;;AAIA,QAAMO,UAAU,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACpC,QAAIA,OAAJ,EAAa;AACXP,MAAAA,QAAQ,CACND,KAAK,CAACS,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,eAAOA,CAAC,CAACJ,IAAD,CAAD,GAAUG,CAAC,CAACH,IAAD,CAAlB;AACD,OAFD,CADM,CAAR;AAKD,KAND,MAMO;AACLN,MAAAA,QAAQ,CACND,KAAK,CAACS,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,eAAOD,CAAC,CAACH,IAAD,CAAD,GAAUI,CAAC,CAACJ,IAAD,CAAlB;AACD,OAFD,CADM,CAAR;AAKD;AACF,GAdD;;AAeA,QAAMK,YAAY,GAAG,MAAM;AACzB,WACE,4BACGV,OAAO,CAACW,GAAR,CAAYC,MAAM,IAAI;AACrB,aACE;AAAI,QAAA,GAAG,EAAEA,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,UAAD;AACE,QAAA,KAAK,EAAEA,MADT;AAEE,QAAA,OAAO,EAAET,WAFX;AAGE,QAAA,MAAM,EAAEC,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD,KAVA,CADH,CADF;AAeD,GAhBD;;AAiBA,SACE;AAAK,IAAA,KAAK,EAAEZ,MAAM,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAEI,MAAf;AAAuB,IAAA,YAAY,EAAEa,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAEDd,KAAK,CAACiB,eAAN,GAAwB,kBAAiB;AACvC,QAAMC,GAAG,GAAG,MAAM5B,KAAK,CACrB,yNADqB,CAAvB;AAGA,QAAM6B,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BH,IAAI,CAACI,MAAO,EAArD;AAEA,SAAO;AACLtB,IAAAA,MAAM,EAAEkB;AADH,GAAP;AAGD,CAXD","sourcesContent":["import Line from \"../components/Row\";\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo } from \"react\";\n\nimport SortId from \"../components/sort\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\n\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nexport default function Index({ humans }) {\n  const [items, setItems] = useState(humans);\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n  \n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    if (reverse) {\n      setItems(\n        items.sort((a, b) => {\n          return b[name] - a[name];\n        })\n      );\n    } else {\n      setItems(\n        items.sort((a, b) => {\n          return a[name] - b[name];\n        })\n      );\n    }\n  };\n  const renderHeader = () => {\n    return (\n      <>\n        {headers.map(header => {\n          return (\n            <th key={header}>\n              <SortButton\n                title={header}\n                onReset={handleReset}\n                onSort={handleSort}\n              />\n            </th>\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <div style={styles.root}>\n      <Table humans={humans} renderHeader={renderHeader} />\n    </div>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(\n    \"http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\"\n  );\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    humans: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}