{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Line from \"../components/line\";\nimport fetch from \"isomorphic-unfetch\";\nexport default function Index(props) {\n  var oneLine = [\"id\", \"firstName\", \"lastName\", \"email\", \"phone\"];\n  props.human.sort(function (a, b) {\n    return a.id - b.id;\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.humans.map(function (human) {\n    return __jsx(Line, {\n      human: human,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  })));\n}\n;\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          console.log(\"Show data fetched. Count: \".concat(data[1]));\n          return _context.abrupt(\"return\", {\n            humans: data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["Line","fetch","Index","props","oneLine","human","sort","a","b","id","humans","map","getInitialProps","res","json","data","console","log","length"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,MAAIC,OAAO,GAAG,CAAC,IAAD,EAAO,WAAP,EAAoB,UAApB,EAAgC,OAAhC,EAAyC,OAAzC,CAAd;AACAD,EAAAA,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC7B,WAAOD,CAAC,CAACE,EAAF,GAAKD,CAAC,CAACC,EAAd;AACD,GAFD;AAKE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDN,KAAK,CAACO,MAAN,CAAaC,GAAb,CAAkB,UAAAN,KAAK;AAAA,WACtB,MAAC,IAAD;AAAO,MAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADsB;AAAA,GAAvB,CADC,CANF,CADF;AAgBD;AAAA;;AAEDH,KAAK,CAACU,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJX,KAAK,CAAC,yNAAD,CADD;;AAAA;AAChBY,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AACAF,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAAC,CAAD,CAA7C;AALsB,2CAOf;AACLL,YAAAA,MAAM,EAAEK;AADH,WAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import Line from \"../components/line\"\nimport fetch from \"isomorphic-unfetch\";\n\nexport default function Index(props) {\n  let oneLine = [\"id\", \"firstName\", \"lastName\", \"email\", \"phone\"];\n  props.human.sort(function(a, b){\n    return a.id-b.id\n  })\n  \n  \n    return (\n      <div>\n        {/* <Line oneLine={oneLine}/> */}\n        \n\n       \n\n        <ul>\n      {props.humans.map( human => (\n        <Line  human={human}/>\n        \n      ))}\n    </ul>\n    \n      </div>\n    );\n  };\n\n  Index.getInitialProps = async function() {\n    const res = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n    const data = await res.json();\n  \n    console.log(`Show data fetched. Count: ${data.length}`);\n    console.log(`Show data fetched. Count: ${data[1]}`);\n  \n    return {\n      humans: data\n    };\n  };"]},"metadata":{},"sourceType":"module"}