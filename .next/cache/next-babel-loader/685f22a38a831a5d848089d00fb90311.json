{"ast":null,"code":"var _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nimport Description from \"../components/description\";\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\nexport default function Index({\n  humans\n}) {\n  const {\n    0: items,\n    1: setItems\n  } = useState(humans);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: itemsPerPage,\n    1: setItemsPerPage\n  } = useState(50);\n  const {\n    0: selectedItem,\n    1: setSelectedItem\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  const handleClick = event => {\n    setCurrentPage(Number(event.target.id));\n    setSelectedItem();\n  };\n\n  const handleClickRow = e => {\n    setSelectedItem(e);\n  };\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const renderPageNumbers = pageNumbers.map(number => {\n    return __jsx(\"li\", {\n      key: number,\n      id: number,\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, number);\n  });\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n  useEffect(() => {\n    setItems(humans);\n  }, [humans]);\n  useEffect(() => {\n    fetch(\"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\").then(response => response.json()).then(data => setItems(data));\n  }, []);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n\n    setItems(newItems);\n    setSelectedItem();\n  };\n\n  const renderHeader = () => {\n    return __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, headers.map(header => {\n      return __jsx(\"th\", {\n        key: header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(SortButton, {\n        title: header,\n        onReset: handleReset,\n        onSort: handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  const renderDescription = () => {\n    if (selectedItem > 0) {\n      return __jsx(Description, {\n        item: currentItems[currentItems.findIndex(item => item.id == selectedItem)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, __jsx(Table, {\n    items: currentItems,\n    renderHeader: renderHeader,\n    renderPageNumbers: renderPageNumbers,\n    onClickRow: handleClickRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), renderDescription());\n} // Index.getInitialProps = async function() {\n//   const res = await fetch(\n//     \"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\"\n//   );\n//   const data = await res.json();\n//   console.log(`Show data fetched. Count: ${data.length}`);\n//   return {\n//     humans: data\n//   };\n// };","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["fetch","useState","useMemo","useEffect","Table","SortButton","Description","styles","root","margin","width","Index","humans","items","setItems","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","selectedItem","setSelectedItem","loading","setLoading","indexOfLastItem","indexOfFirstItem","currentItems","slice","handleClick","event","Number","target","id","handleClickRow","e","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","map","number","headers","Object","keys","then","response","json","data","handleReset","handleSort","name","reverse","newItems","sort","a","b","localeCompare","renderHeader","header","renderDescription","findIndex","item"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nimport Description from \"../components/description\";\n\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nexport default function Index({ humans }) {\n  const [items, setItems] = useState(humans);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(50);\n  const [selectedItem, setSelectedItem] = useState();\n  const [loading, setLoading] = useState(false);\n  \n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  const handleClick = event => {\n    setCurrentPage(Number(event.target.id));\n    setSelectedItem();\n  };\n\n  const handleClickRow = e => {\n    setSelectedItem(e);\n  };\n\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const renderPageNumbers = pageNumbers.map(number => {\n    return (\n      <li key={number} id={number} onClick={handleClick}>\n        {number}\n      </li>\n    );\n  });\n\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n\n  useEffect(() => {\n    setItems(humans);\n  }, [humans]);\n\n  useEffect(() => {\n    fetch(\"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\")\n      .then(response => response.json())\n      .then(data => setItems(data));\n  }, []);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n    setItems(newItems);\n    setSelectedItem();\n  };\n  const renderHeader = () => {\n    return (\n      <thead>\n        <tr>\n          {headers.map(header => {\n            return (\n              <th key={header}>\n                <SortButton\n                  title={header}\n                  onReset={handleReset}\n                  onSort={handleSort}\n                />\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  };\n\n  const renderDescription = () => {\n    if (selectedItem > 0) {\n      return (\n        <Description\n          item={\n            currentItems[\n              currentItems.findIndex(item => item.id == selectedItem)\n            ]\n          }\n        />\n      );\n    }\n  };\n\n  return (\n    <div style={styles.root}>\n      <Table\n        items={currentItems}\n        renderHeader={renderHeader}\n        renderPageNumbers={renderPageNumbers}\n        onClickRow={handleClickRow}\n      />\n      {renderDescription()}\n    </div>\n  );\n}\n\n// Index.getInitialProps = async function() {\n//   const res = await fetch(\n//     \"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\"\n//   );\n//   const data = await res.json();\n\n//   console.log(`Show data fetched. Count: ${data.length}`);\n\n//   return {\n//     humans: data\n//   };\n// };\n"]},"metadata":{},"sourceType":"module"}