{"ast":null,"code":"var _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\nexport default function Index({\n  humans\n}) {\n  const {\n    0: items,\n    1: setItems\n  } = useState(humans);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: itemsPerPage,\n    1: setItemsPerPage\n  } = useState(50);\n  const indexOfLastTodo = currentPage * itemsPerPage;\n  const indexOfFirstTodo = indexOfLastTodo - indexPerPage;\n  const currentItems = items.slice(indexOfFirstTodo, indexOfLastTodo);\n  const renderItems = currentItems.map((item, index) => {\n    return __jsx(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, item.id, \" \", item.lastName);\n  });\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n  useEffect(() => {\n    setItems(humans);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === 'string') {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === 'number') {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === 'string') {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === 'number') {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n\n    setItems(newItems);\n  };\n\n  const renderHeader = () => {\n    return __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, headers.map(header => {\n      return __jsx(\"th\", {\n        key: header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, __jsx(SortButton, {\n        title: header,\n        onReset: handleReset,\n        onSort: handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, renderItems, __jsx(Table, {\n    items: items,\n    renderHeader: renderHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch(\"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\");\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    humans: data\n  };\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["fetch","useState","useMemo","useEffect","Table","SortButton","styles","root","margin","width","Index","humans","items","setItems","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","indexOfLastTodo","indexOfFirstTodo","indexPerPage","currentItems","slice","renderItems","map","item","index","id","lastName","headers","Object","keys","handleReset","handleSort","name","reverse","newItems","sort","a","b","localeCompare","renderHeader","header","getInitialProps","res","data","json","console","log","length"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\n\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\n\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nexport default function Index({ humans }) {\n  const [items, setItems] = useState(humans);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(50);\n\n\n  const indexOfLastTodo = currentPage * itemsPerPage;\n  const indexOfFirstTodo = indexOfLastTodo - indexPerPage;\n  const currentItems = items.slice(indexOfFirstTodo, indexOfLastTodo);\n\n  const renderItems = currentItems.map((item, index) => {\n    return <li key={index}>{item.id} {item.lastName}</li>;\n  });\n\n\n\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n\n  useEffect(()=> {\n    setItems(humans);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if(typeof a[name] === 'string') {\n          return a[name].localeCompare(b[name]);\n        } else if(typeof a[name] === 'number') {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if(typeof a[name] === 'string') {\n          return b[name].localeCompare(a[name]);\n        } else if(typeof a[name] === 'number') {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n    setItems(newItems);\n  };\n  const renderHeader = () => {\n    return (\n      <thead>\n        <tr>\n          {headers.map(header => {\n            return (\n              <th key={header}>\n                <SortButton\n                  title={header}\n                  onReset={handleReset}\n                  onSort={handleSort}\n                />\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  };\n  return (\n    <div style={styles.root}>\n      {renderItems}\n      <Table items={items} renderHeader={renderHeader} />\n    </div>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(\n    \"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\");\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    humans: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}