{"ast":null,"code":"var _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Line from \"../components/line\";\nimport fetch from \"isomorphic-unfetch\";\nimport { useState } from \"react\";\nimport SortId from \"../components/sort\";\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nfunction sortId() {\n  humans.sort(function (a, b) {\n    return a.id - b.id;\n  });\n}\n\nexport default function Index(props) {\n  const {\n    0: sort,\n    1: setSort\n  } = useState(false);\n\n  const toDoOpen = () => {\n    setSort(1);\n    sortId(humans);\n  };\n\n  let oneLine = {\n    \"id\": \"id\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"email\": \"email\",\n    \"phone\": \"phone\"\n  };\n  let humans = props.humans;\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(Line, {\n    human: oneLine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), humans.map(human => __jsx(Line, {\n    human: human,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    onClick: sortId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\"));\n}\n;\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    humans: data\n  };\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["Line","fetch","useState","SortId","styles","root","margin","width","sortId","humans","sort","a","b","id","Index","props","setSort","toDoOpen","oneLine","map","human","getInitialProps","res","data","json","console","log","length"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAC,CADH;AAEJC,IAAAA,KAAK,EAAC;AAFF;AADO,CAAf;;AAKE,SAASC,MAAT,GACA;AAACC,EAAAA,MAAM,CAACC,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAc;AACzB,WAAOD,CAAC,CAACE,EAAF,GAAKD,CAAC,CAACC,EAAd;AACD,GAFA;AAEE;;AACL,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAM;AAAA,OAACL,IAAD;AAAA,OAAOM;AAAP,MAAkBd,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMe,QAAQ,GAAG,MAAM;AACrBD,IAAAA,OAAO,CAAC,CAAD,CAAP;AACAR,IAAAA,MAAM,CAACC,MAAD,CAAN;AACD,GAHD;;AAIA,MAAIS,OAAO,GAAG;AAAC,UAAK,IAAN;AAAY,iBAAY,WAAxB;AAAqC,gBAAW,UAAhD;AAA4D,aAAQ,OAApE;AAA6E,aAAQ;AAArF,GAAd;AACA,MAAIT,MAAM,GAAGM,KAAK,CAACN,MAAnB;AACE,SACE;AAAK,IAAA,KAAK,EAAEL,MAAM,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGT,MAAM,CAACU,GAAP,CAAWC,KAAK,IACf,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAHH,EAOE;AAAS,IAAA,OAAO,EAAEZ,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAPF,CADF;AAWD;AAAA;;AAEDM,KAAK,CAACO,eAAN,GAAwB,kBAAiB;AACvC,QAAMC,GAAG,GAAG,MAAMrB,KAAK,CAAC,yNAAD,CAAvB;AACA,QAAMsB,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BH,IAAI,CAACI,MAAO,EAArD;AAEA,SAAO;AACLlB,IAAAA,MAAM,EAAEc;AADH,GAAP;AAGD,CATD","sourcesContent":["import Line from \"../components/line\"\nimport fetch from \"isomorphic-unfetch\";\nimport { useState } from \"react\";\n\nimport SortId from \"../components/sort\";\n\nconst styles = {\n  root: {\n    margin:0,\n    width:\"100%\"\n  },}\n  function sortId ()\n  {humans.sort(function(a, b){\n    return a.id-b.id\n  })}\nexport default function Index(props) {\n  const [sort, setSort] = useState(false);\n  const toDoOpen = () => {\n    setSort(1);\n    sortId(humans);\n  };\n  let oneLine = {\"id\":\"id\", \"firstName\":\"firstName\", \"lastName\":\"lastName\", \"email\":\"email\", \"phone\":\"phone\"};\n  let humans = props.humans;\n    return (\n      <div style={styles.root}>\n        <Line human={oneLine} />\n        {/* <SortId humans={humans}/> */}\n        {humans.map(human => (\n          <Line human={human} />\n          \n        ))}\n        <button  onClick={sortId}>Сортировка</button>\n      </div>\n    );\n  };\n\n  Index.getInitialProps = async function() {\n    const res = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n    const data = await res.json();\n  \n    console.log(`Show data fetched. Count: ${data.length}`);\n  \n    return {\n      humans: data\n    };\n  };"]},"metadata":{},"sourceType":"module"}