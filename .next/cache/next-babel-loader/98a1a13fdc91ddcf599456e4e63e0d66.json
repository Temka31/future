{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nvar styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\nexport default function Index(_ref) {\n  var humans = _ref.humans;\n\n  var _useState = useState(humans),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var _useState2 = useState(1),\n      currentPage = _useState2[0],\n      setCurrentPage = _useState2[1];\n\n  var _useState3 = useState(50),\n      itemsPerPage = _useState3[0],\n      setItemsPerPage = _useState3[1];\n\n  var _useState4 = useState(),\n      selectedItem = _useState4[0],\n      setSelectedItem = _useState4[1];\n\n  var indexOfLastItem = currentPage * itemsPerPage;\n  var indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  var currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  var handleClick = function handleClick(event) {\n    setCurrentPage(Number(event.target.id));\n  };\n\n  var handleClickRow = function handleClickRow(event) {\n    setSelectedItem(Number(event.target.id));\n    alert(SelectedItem);\n  };\n\n  var pageNumbers = [];\n\n  for (var i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  var renderPageNumbers = pageNumbers.map(function (number) {\n    return __jsx(\"li\", {\n      key: number,\n      id: number,\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, number);\n  });\n  var headers = useMemo(function () {\n    return _Object$keys(humans[0]);\n  }, [humans]);\n  useEffect(function () {\n    setItems(humans);\n  }, [humans]);\n\n  var handleReset = function handleReset() {\n    setItems(humans);\n  };\n\n  var handleSort = function handleSort(name, reverse) {\n    var newItems = _toConsumableArray(items);\n\n    if (reverse) {\n      newItems.sort(function (a, b) {\n        if (typeof a[name] === \"string\") {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort(function (a, b) {\n        if (typeof a[name] === \"string\") {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n\n    setItems(newItems);\n  };\n\n  var renderHeader = function renderHeader() {\n    return __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, headers.map(function (header) {\n      return __jsx(\"th\", {\n        key: header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, __jsx(SortButton, {\n        title: header,\n        onReset: handleReset,\n        onSort: handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(Table, {\n    items: currentItems,\n    renderHeader: renderHeader,\n    renderPageNumbers: renderPageNumbers,\n    onClickRow: handleClickRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n}\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\"));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            humans: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["fetch","useState","useMemo","useEffect","Table","SortButton","styles","root","margin","width","Index","humans","items","setItems","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","selectedItem","setSelectedItem","indexOfLastItem","indexOfFirstItem","currentItems","slice","handleClick","event","Number","target","id","handleClickRow","alert","SelectedItem","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","map","number","headers","handleReset","handleSort","name","reverse","newItems","sort","a","b","localeCompare","renderHeader","header","getInitialProps","res","json","data","console","log"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\n\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nexport default function Index({ humans }) {\n  const [items, setItems] = useState(humans);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(50);\n  const [selectedItem,setSelectedItem]=useState();\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  const handleClick = event => {\n    setCurrentPage(Number(event.target.id));\n  };\n\nconst handleClickRow = event =>{\n  setSelectedItem (Number(event.target.id));\n  alert(SelectedItem);\n}\n\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const renderPageNumbers = pageNumbers.map(number => {\n    return (\n      <li key={number} id={number} onClick={handleClick}>\n        {number}\n      </li>\n    );\n  });\n\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n\n  useEffect(() => {\n    setItems(humans);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === \"string\") {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === \"number\") {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n    setItems(newItems);\n  };\n  const renderHeader = () => {\n    return (\n      <thead>\n        <tr>\n          {headers.map(header => {\n            return (\n              <th key={header}>\n                <SortButton\n                  title={header}\n                  onReset={handleReset}\n                  onSort={handleSort}\n                />\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  };\n  return (\n    <div style={styles.root}>\n      <Table\n        items={currentItems}\n        renderHeader={renderHeader}\n        renderPageNumbers={renderPageNumbers}\n        onClickRow={handleClickRow}\n      />\n    </div>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(\n    \"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\"\n  );\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    humans: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}