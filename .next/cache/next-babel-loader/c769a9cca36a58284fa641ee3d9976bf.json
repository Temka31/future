{"ast":null,"code":"var _jsxFileName = \"/Users/tema/future/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Row from \"../components/Row\";\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\nexport default function Index({\n  humans\n}) {\n  const {\n    0: items,\n    1: setItems\n  } = useState(humans);\n  const {\n    0: currentItems,\n    1: setCurrentItemss\n  } = useState(items.slice(indexOfFirstItem, indexOfLastItem));\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: itemsPerPage,\n    1: setItemsPerPage\n  } = useState(10);\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage; // const renderItems = currentItems.map((item) => {\n  //   return <Row key={item.id} human={item}/>;\n  // });\n\n  const handleClick = event => {\n    setCurrentPage(Number(event.target.id));\n  };\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const renderPageNumbers = pageNumbers.map(number => {\n    return __jsx(\"li\", {\n      key: number,\n      id: number,\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, number);\n  });\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n  useEffect(() => {\n    setItems(humans);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === 'string') {\n          return a[name].localeCompare(b[name]);\n        } else if (typeof a[name] === 'number') {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if (typeof a[name] === 'string') {\n          return b[name].localeCompare(a[name]);\n        } else if (typeof a[name] === 'number') {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n\n    setItems(newItems);\n    const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n  };\n\n  const renderHeader = () => {\n    return __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, headers.map(header => {\n      return __jsx(\"th\", {\n        key: header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(SortButton, {\n        title: header,\n        onReset: handleReset,\n        onSort: handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  return __jsx(\"div\", {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Table, {\n    items: currentItems,\n    renderHeader: renderHeader,\n    renderPageNumbers: renderPageNumbers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }));\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch(\"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\");\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    humans: data\n  };\n};","map":{"version":3,"sources":["/Users/tema/future/pages/index.js"],"names":["fetch","useState","useMemo","useEffect","Row","Table","SortButton","styles","root","margin","width","Index","humans","items","setItems","currentItems","setCurrentItemss","slice","indexOfFirstItem","indexOfLastItem","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","handleClick","event","Number","target","id","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","map","number","headers","Object","keys","handleReset","handleSort","name","reverse","newItems","sort","a","b","localeCompare","renderHeader","header","getInitialProps","res","data","json","console","log"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport Row from \"../components/Row\"\nimport Table from \"../components/table\";\nimport SortButton from \"../components/sortButton\";\n\nconst styles = {\n  root: {\n    margin: 0,\n    width: \"100%\"\n  }\n};\n\nexport default function Index({ humans }) {\n  const [items, setItems] = useState(humans);\n  const [currentItems, setCurrentItemss] = useState(items.slice(indexOfFirstItem, indexOfLastItem));\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n\n  // const renderItems = currentItems.map((item) => {\n  //   return <Row key={item.id} human={item}/>;\n  // });\n\n\n  const handleClick = (event) => {\n    \n      setCurrentPage(Number(event.target.id)) \n    }\n\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(items.length / itemsPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <li\n          key={number}\n          id={number}\n          onClick={handleClick}\n        >\n          {number}\n        </li>\n      );\n    });\n\n\n\n  const headers = useMemo(() => {\n    return Object.keys(humans[0]);\n  }, [humans]);\n\n  useEffect(()=> {\n    setItems(humans);\n  }, [humans]);\n\n  const handleReset = () => {\n    setItems(humans);\n  };\n\n  const handleSort = (name, reverse) => {\n    const newItems = [...items];\n    if (reverse) {\n      newItems.sort((a, b) => {\n        if(typeof a[name] === 'string') {\n          return a[name].localeCompare(b[name]);\n        } else if(typeof a[name] === 'number') {\n          return +a[name] > +b[name];\n        }\n      });\n    } else {\n      newItems.sort((a, b) => {\n        if(typeof a[name] === 'string') {\n          return b[name].localeCompare(a[name]);\n        } else if(typeof a[name] === 'number') {\n          return +a[name] < +b[name];\n        }\n      });\n    }\n    setItems(newItems);\n    const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n  };\n  const renderHeader = () => {\n    return (\n      <thead>\n        <tr>\n          {headers.map(header => {\n            return (\n              <th key={header}>\n                <SortButton\n                  title={header}\n                  onReset={handleReset}\n                  onSort={handleSort}\n                />\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  };\n  return (\n    <div style={styles.root}>\n      {/* {renderItems} */}\n      <Table items={currentItems} renderHeader={renderHeader} renderPageNumbers={renderPageNumbers} />\n    </div>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(\n    \"http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D\");\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    humans: data\n  };\n};\n"]},"metadata":{},"sourceType":"module"}